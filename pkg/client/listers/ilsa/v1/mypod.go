/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/jungmin17/ilsa-clientset-example/pkg/apis/Ilsa/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MyPodLister helps list MyPods.
// All objects returned here must be treated as read-only.
type MyPodLister interface {
	// List lists all MyPods in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.MyPod, err error)
	// MyPods returns an object that can list and get MyPods.
	MyPods(namespace string) MyPodNamespaceLister
	MyPodListerExpansion
}

// myPodLister implements the MyPodLister interface.
type myPodLister struct {
	indexer cache.Indexer
}

// NewMyPodLister returns a new MyPodLister.
func NewMyPodLister(indexer cache.Indexer) MyPodLister {
	return &myPodLister{indexer: indexer}
}

// List lists all MyPods in the indexer.
func (s *myPodLister) List(selector labels.Selector) (ret []*v1.MyPod, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.MyPod))
	})
	return ret, err
}

// MyPods returns an object that can list and get MyPods.
func (s *myPodLister) MyPods(namespace string) MyPodNamespaceLister {
	return myPodNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MyPodNamespaceLister helps list and get MyPods.
// All objects returned here must be treated as read-only.
type MyPodNamespaceLister interface {
	// List lists all MyPods in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.MyPod, err error)
	// Get retrieves the MyPod from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.MyPod, error)
	MyPodNamespaceListerExpansion
}

// myPodNamespaceLister implements the MyPodNamespaceLister
// interface.
type myPodNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MyPods in the indexer for a given namespace.
func (s myPodNamespaceLister) List(selector labels.Selector) (ret []*v1.MyPod, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.MyPod))
	})
	return ret, err
}

// Get retrieves the MyPod from the indexer for a given namespace and name.
func (s myPodNamespaceLister) Get(name string) (*v1.MyPod, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("mypod"), name)
	}
	return obj.(*v1.MyPod), nil
}
